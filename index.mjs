// src/redis/schema.ts
import { z } from "zod";
var zRawRaidTweetMini = z.object({
  n: z.string(),
  // name
  sn: z.string(),
  // screen_name
  en: z.string(),
  // enemy_name
  ui: z.number(),
  // user_id
  ti: z.number(),
  // tweet_id
  bi: z.string(),
  // battle_id
  lv: z.string(),
  // level
  l: z.enum(["en", "ja"]),
  // language
  t: z.number(),
  // time
  c: z.string().optional()
  // comment
});
var zRaidTweetMini = z.object({
  n: z.string(),
  // name
  sn: z.string(),
  // screen_name
  ui: z.number(),
  // user_id
  ti: z.number(),
  // tweet_id
  bi: z.string(),
  // battle_id
  ei: z.number(),
  // enemy_id(-1はリスト外)
  lv: z.string().optional(),
  // level
  en: z.string().optional(),
  // enemy_name
  l: z.enum(["en", "ja"]),
  // language
  t: z.number(),
  // time
  ft: z.number(),
  // first time(初回投稿時間)
  c: z.string().optional()
  // comment
});

// src/gbsList.ts
import axios from "axios";
import { z as z2 } from "zod";
var gbsList = [];
async function initGbsList(url) {
  const { data } = await axios.get(url);
  gbsList = zGbsList.parse(data);
}
function getEnemyId(name, level) {
  const enemy = gbsList.find((item) => {
    return (item.en === name || item.ja === name) && item.level === level;
  });
  return enemy?.id ?? -1;
}
var EnemyElement = {
  None: 0,
  Fire: 1,
  Water: 2,
  Earch: 3,
  Wind: 4,
  Light: 5,
  Dark: 6
};
var zGbsListItem = z2.object({
  id: z2.number(),
  attr: z2.nativeEnum(EnemyElement),
  ja: z2.string(),
  en: z2.string(),
  image: z2.string().nullable(),
  level: z2.string(),
  tags: z2.array(z2.string())
});
var zGbsList = z2.array(zGbsListItem);

// src/utils/index.ts
var utils_default = {};
export {
  EnemyElement,
  utils_default as default,
  gbsList,
  getEnemyId,
  initGbsList,
  zGbsList,
  zGbsListItem,
  zRaidTweetMini
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vZ2JzLW9wZW4vc3JjL3JlZGlzL3NjaGVtYS50cyIsICIuLi9nYnMtb3Blbi9zcmMvZ2JzTGlzdC50cyIsICIuLi9nYnMtb3Blbi9zcmMvdXRpbHMvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFJhd1JhaWRUd2VldCB9IGZyb20gJ0AvdHdlZXQvcmVjZWl2ZXInO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8qKlxuICogUmVkaXNcdTkwMDFcdTRGRTFcdTc1MjhcdTMwNkVcdTY1ODdcdTVCNTdcdTY1NzBcdTMwOTJcdTYyOTFcdTMwNDhcdTMwNUZSYWlkVHdlZXRcbiAqL1xuZXhwb3J0IGNvbnN0IHpSYXdSYWlkVHdlZXRNaW5pID0gei5vYmplY3Qoe1xuICBuOiB6LnN0cmluZygpLCAvLyBuYW1lXG4gIHNuOiB6LnN0cmluZygpLCAvLyBzY3JlZW5fbmFtZVxuICBlbjogei5zdHJpbmcoKSwgLy8gZW5lbXlfbmFtZVxuICB1aTogei5udW1iZXIoKSwgLy8gdXNlcl9pZFxuICB0aTogei5udW1iZXIoKSwgLy8gdHdlZXRfaWRcbiAgYmk6IHouc3RyaW5nKCksIC8vIGJhdHRsZV9pZFxuICBsdjogei5zdHJpbmcoKSwgLy8gbGV2ZWxcbiAgbDogei5lbnVtKFsnZW4nLCAnamEnXSksIC8vIGxhbmd1YWdlXG4gIHQ6IHoubnVtYmVyKCksIC8vIHRpbWVcbiAgYzogei5zdHJpbmcoKS5vcHRpb25hbCgpLCAvLyBjb21tZW50XG59KTtcbmV4cG9ydCB0eXBlIFJhd1JhaWRUd2VldE1pbmkgPSB6LmluZmVyPHR5cGVvZiB6UmF3UmFpZFR3ZWV0TWluaT47XG5cbmV4cG9ydCBmdW5jdGlvbiBtaW5pZnlSYXdSYWlkVHdlZXQodHdlZXQ6IFJhd1JhaWRUd2VldCk6IFJhd1JhaWRUd2VldE1pbmkge1xuICByZXR1cm4ge1xuICAgIG46IHR3ZWV0Lm5hbWUsXG4gICAgc246IHR3ZWV0LnNjcmVlbl9uYW1lLFxuICAgIGVuOiB0d2VldC5lbmVteV9uYW1lLFxuICAgIHVpOiB0d2VldC51c2VyX2lkLFxuICAgIHRpOiB0d2VldC50d2VldF9pZCxcbiAgICBiaTogdHdlZXQuYmF0dGxlX2lkLFxuICAgIGx2OiB0d2VldC5sZXZlbCxcbiAgICBsOiB0d2VldC5sYW5ndWFnZSxcbiAgICB0OiB0d2VldC50aW1lLFxuICAgIGM6IHR3ZWV0LmNvbW1lbnQsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnBhY2tSYXdSYWlkVHdlZXRNaW5pKG1pbmk6IFJhd1JhaWRUd2VldE1pbmkpOiBSYXdSYWlkVHdlZXQge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG1pbmkubixcbiAgICBzY3JlZW5fbmFtZTogbWluaS5zbixcbiAgICBlbmVteV9uYW1lOiBtaW5pLmVuLFxuICAgIHVzZXJfaWQ6IG1pbmkudWksXG4gICAgdHdlZXRfaWQ6IG1pbmkudGksXG4gICAgYmF0dGxlX2lkOiBtaW5pLmJpLFxuICAgIGxldmVsOiBtaW5pLmx2LFxuICAgIGxhbmd1YWdlOiBtaW5pLmwsXG4gICAgdGltZTogbWluaS50LFxuICAgIGNvbW1lbnQ6IG1pbmkuYyxcbiAgfTtcbn1cblxuLyoqXG4gKiBcdTVCOUZcdTk2OUJcdTMwNkJcdTkxNERcdTRGRTFcdTMwNTVcdTMwOENcdTMwOEJcdTMwQzRcdTMwQTRcdTMwRkNcdTMwQzhcdTMwQzdcdTMwRkNcdTMwQkZcbiAqL1xuZXhwb3J0IGNvbnN0IHpSYWlkVHdlZXRNaW5pID0gei5vYmplY3Qoe1xuICBuOiB6LnN0cmluZygpLCAvLyBuYW1lXG4gIHNuOiB6LnN0cmluZygpLCAvLyBzY3JlZW5fbmFtZVxuICB1aTogei5udW1iZXIoKSwgLy8gdXNlcl9pZFxuICB0aTogei5udW1iZXIoKSwgLy8gdHdlZXRfaWRcbiAgYmk6IHouc3RyaW5nKCksIC8vIGJhdHRsZV9pZFxuICBlaTogei5udW1iZXIoKSwgLy8gZW5lbXlfaWQoLTFcdTMwNkZcdTMwRUFcdTMwQjlcdTMwQzhcdTU5MTYpXG4gIGx2OiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIGxldmVsXG4gIGVuOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIGVuZW15X25hbWVcbiAgbDogei5lbnVtKFsnZW4nLCAnamEnXSksIC8vIGxhbmd1YWdlXG4gIHQ6IHoubnVtYmVyKCksIC8vIHRpbWVcbiAgZnQ6IHoubnVtYmVyKCksIC8vIGZpcnN0IHRpbWUoXHU1MjFEXHU1NkRFXHU2Mjk1XHU3QTNGXHU2NjQyXHU5NTkzKVxuICBjOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIGNvbW1lbnRcbn0pO1xuZXhwb3J0IHR5cGUgUmFpZFR3ZWV0TWluaSA9IHouaW5mZXI8dHlwZW9mIHpSYWlkVHdlZXRNaW5pPjtcbiIsICJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmV4cG9ydCBsZXQgZ2JzTGlzdDogR2JzTGlzdCA9IFtdO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdEdic0xpc3QodXJsOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcbiAgZ2JzTGlzdCA9IHpHYnNMaXN0LnBhcnNlKGRhdGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5lbXlJZChuYW1lOiBzdHJpbmcsIGxldmVsOiBzdHJpbmcpIHtcbiAgY29uc3QgZW5lbXkgPSBnYnNMaXN0LmZpbmQoKGl0ZW0pID0+IHtcbiAgICByZXR1cm4gKGl0ZW0uZW4gPT09IG5hbWUgfHwgaXRlbS5qYSA9PT0gbmFtZSkgJiYgaXRlbS5sZXZlbCA9PT0gbGV2ZWw7XG4gIH0pO1xuICByZXR1cm4gZW5lbXk/LmlkID8/IC0xO1xufVxuXG5leHBvcnQgY29uc3QgRW5lbXlFbGVtZW50ID0ge1xuICBOb25lOiAwLFxuICBGaXJlOiAxLFxuICBXYXRlcjogMixcbiAgRWFyY2g6IDMsXG4gIFdpbmQ6IDQsXG4gIExpZ2h0OiA1LFxuICBEYXJrOiA2LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IHpHYnNMaXN0SXRlbSA9IHoub2JqZWN0KHtcbiAgaWQ6IHoubnVtYmVyKCksXG4gIGF0dHI6IHoubmF0aXZlRW51bShFbmVteUVsZW1lbnQpLFxuICBqYTogei5zdHJpbmcoKSxcbiAgZW46IHouc3RyaW5nKCksXG4gIGltYWdlOiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gIGxldmVsOiB6LnN0cmluZygpLFxuICB0YWdzOiB6LmFycmF5KHouc3RyaW5nKCkpLFxufSk7XG5leHBvcnQgdHlwZSBHYnNMaXN0SXRlbSA9IHouaW5mZXI8dHlwZW9mIHpHYnNMaXN0SXRlbT47XG5cbmV4cG9ydCBjb25zdCB6R2JzTGlzdCA9IHouYXJyYXkoekdic0xpc3RJdGVtKTtcbmV4cG9ydCB0eXBlIEdic0xpc3QgPSB6LmluZmVyPHR5cGVvZiB6R2JzTGlzdD47XG4iLCAiLy8gXHU1OTE2XHU5MEU4XHU1NDExXHUzMDUxXHUzMDZFZXhwb3J0KFx1NEUzQlx1MzA2Qlx1NTc4QilcblxuZXhwb3J0IHsgUmFpZFR3ZWV0TWluaSB9IGZyb20gJ0AvcmVkaXMvc2NoZW1hJztcbmV4cG9ydCB7IHpSYWlkVHdlZXRNaW5pIH0gZnJvbSAnQC9yZWRpcy9zY2hlbWEnO1xuZXhwb3J0ICogZnJvbSAnQC9nYnNMaXN0JztcblxuZXhwb3J0IGRlZmF1bHQge307XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsU0FBUyxTQUFTO0FBS1gsSUFBTSxvQkFBb0IsRUFBRSxPQUFPO0FBQUEsRUFDeEMsR0FBRyxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ1osSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQztBQUFBO0FBQUEsRUFDdEIsR0FBRyxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ1osR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTO0FBQUE7QUFDekIsQ0FBQztBQW9DTSxJQUFNLGlCQUFpQixFQUFFLE9BQU87QUFBQSxFQUNyQyxHQUFHLEVBQUUsT0FBTztBQUFBO0FBQUEsRUFDWixJQUFJLEVBQUUsT0FBTztBQUFBO0FBQUEsRUFDYixJQUFJLEVBQUUsT0FBTztBQUFBO0FBQUEsRUFDYixJQUFJLEVBQUUsT0FBTztBQUFBO0FBQUEsRUFDYixJQUFJLEVBQUUsT0FBTztBQUFBO0FBQUEsRUFDYixJQUFJLEVBQUUsT0FBTztBQUFBO0FBQUEsRUFDYixJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVM7QUFBQTtBQUFBLEVBQ3hCLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUztBQUFBO0FBQUEsRUFDeEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQztBQUFBO0FBQUEsRUFDdEIsR0FBRyxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ1osSUFBSSxFQUFFLE9BQU87QUFBQTtBQUFBLEVBQ2IsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTO0FBQUE7QUFDekIsQ0FBQzs7O0FDbEVELE9BQU8sV0FBVztBQUNsQixTQUFTLEtBQUFBLFVBQVM7QUFFWCxJQUFJLFVBQW1CLENBQUM7QUFFL0IsZUFBc0IsWUFBWSxLQUFhO0FBQzdDLFFBQU0sRUFBRSxLQUFLLElBQUksTUFBTSxNQUFNLElBQUksR0FBRztBQUNwQyxZQUFVLFNBQVMsTUFBTSxJQUFJO0FBQy9CO0FBRU8sU0FBUyxXQUFXLE1BQWMsT0FBZTtBQUN0RCxRQUFNLFFBQVEsUUFBUSxLQUFLLENBQUMsU0FBUztBQUNuQyxZQUFRLEtBQUssT0FBTyxRQUFRLEtBQUssT0FBTyxTQUFTLEtBQUssVUFBVTtBQUFBLEVBQ2xFLENBQUM7QUFDRCxTQUFPLE9BQU8sTUFBTTtBQUN0QjtBQUVPLElBQU0sZUFBZTtBQUFBLEVBQzFCLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLE1BQU07QUFDUjtBQUVPLElBQU0sZUFBZUEsR0FBRSxPQUFPO0FBQUEsRUFDbkMsSUFBSUEsR0FBRSxPQUFPO0FBQUEsRUFDYixNQUFNQSxHQUFFLFdBQVcsWUFBWTtBQUFBLEVBQy9CLElBQUlBLEdBQUUsT0FBTztBQUFBLEVBQ2IsSUFBSUEsR0FBRSxPQUFPO0FBQUEsRUFDYixPQUFPQSxHQUFFLE9BQU8sRUFBRSxTQUFTO0FBQUEsRUFDM0IsT0FBT0EsR0FBRSxPQUFPO0FBQUEsRUFDaEIsTUFBTUEsR0FBRSxNQUFNQSxHQUFFLE9BQU8sQ0FBQztBQUMxQixDQUFDO0FBR00sSUFBTSxXQUFXQSxHQUFFLE1BQU0sWUFBWTs7O0FDaEM1QyxJQUFPLGdCQUFRLENBQUM7IiwKICAibmFtZXMiOiBbInoiXQp9Cg==