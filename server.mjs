// src/config.ts
import { z } from "zod";
import * as dotenv from "dotenv";
dotenv.config();
var zConfig = z.object({
  OAUTH_CALLBACK: z.string().url(),
  // CLIENT_ID: z.string(),
  // CLIENT_SECRET: z.string(),
  CONSUMER_KEY: z.string(),
  CONSUMER_SECRET: z.string(),
  PORT: z.string(),
  CACHE_PORT: z.string(),
  STREAM_PORT: z.string(),
  GBS_LIST: z.string().url(),
  REDIS_HOST: z.string(),
  REDIS_PORT: z.string(),
  REDIS_PASS: z.string()
});
var env = zConfig.parse(process.env);

// src/redis/index.ts
import Redis from "ioredis";

// src/redis/schema.ts
import { z as z2 } from "zod";
var zRawRaidTweetMini = z2.object({
  n: z2.string(),
  // name
  sn: z2.string(),
  // screen_name
  en: z2.string(),
  // enemy_name
  ui: z2.number(),
  // user_id
  ti: z2.number(),
  // tweet_id
  bi: z2.string(),
  // battle_id
  lv: z2.string(),
  // level
  l: z2.enum(["en", "ja"]),
  // language
  t: z2.number(),
  // time
  c: z2.string().optional()
  // comment
});
function minifyRawRaidTweet(tweet) {
  return {
    n: tweet.name,
    sn: tweet.screen_name,
    en: tweet.enemy_name,
    ui: tweet.user_id,
    ti: tweet.tweet_id,
    bi: tweet.battle_id,
    lv: tweet.level,
    l: tweet.language,
    t: tweet.time,
    c: tweet.comment
  };
}
function unpackRawRaidTweetMini(mini) {
  return {
    name: mini.n,
    screen_name: mini.sn,
    enemy_name: mini.en,
    user_id: mini.ui,
    tweet_id: mini.ti,
    battle_id: mini.bi,
    level: mini.lv,
    language: mini.l,
    time: mini.t,
    comment: mini.c
  };
}
var zRaidTweetMini = z2.object({
  n: z2.string(),
  // name
  sn: z2.string(),
  // screen_name
  ui: z2.number(),
  // user_id
  ti: z2.number(),
  // tweet_id
  bi: z2.string(),
  // battle_id
  ei: z2.number(),
  // enemy_id(-1はリスト外)
  lv: z2.string().optional(),
  // level
  en: z2.string().optional(),
  // enemy_name
  l: z2.enum(["en", "ja"]),
  // language
  t: z2.number(),
  // time
  ft: z2.number(),
  // first time(初回投稿時間)
  c: z2.string().optional()
  // comment
});

// src/redis/index.ts
import mitt from "mitt";
var redisOps = {
  host: env.REDIS_HOST,
  password: env.REDIS_PASS,
  port: Number.parseInt(env.REDIS_PORT)
};
function getRawChClient() {
  const receiver = mitt();
  const subRedis = new Redis(redisOps);
  subRedis.subscribe("gbs-open-raw");
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRawRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch {
    }
  });
  return receiver;
}
function getRaidTweetChClient() {
  const receiver = mitt();
  const subRedis = new Redis(redisOps);
  subRedis.subscribe("gbs-open-tweet");
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch {
    }
  });
  return receiver;
}
var pubRedis = new Redis(redisOps);
function sendRawRaidTweet(tweet) {
  const mini = minifyRawRaidTweet(tweet);
  const json = JSON.stringify(mini);
  pubRedis.publish("gbs-open-raw", json);
}
function sendRaidTweet(tweet) {
  const json = JSON.stringify(tweet);
  pubRedis.publish("gbs-open-tweet", json);
}
export {
  env,
  getRaidTweetChClient,
  getRawChClient,
  minifyRawRaidTweet,
  redisOps,
  sendRaidTweet,
  sendRawRaidTweet,
  unpackRawRaidTweetMini,
  zConfig,
  zRaidTweetMini,
  zRawRaidTweetMini
};
//# sourceMappingURL=data:application/json;base64,