// src/redis/config.ts
import { z } from "zod";
import * as dotenv from "dotenv";
dotenv.config();
var zRedisConfig = z.object({
  REDIS_HOST: z.string(),
  REDIS_PORT: z.string(),
  REDIS_PASS: z.string()
});
var redisEnv = zRedisConfig.parse(process.env);

// src/redis/index.ts
import Redis from "ioredis";

// src/redis/schema.ts
import { z as z2 } from "zod";
var zRawRaidTweetMini = z2.object({
  n: z2.string(),
  // name
  sn: z2.string(),
  // screen_name
  en: z2.string(),
  // enemy_name
  ui: z2.string(),
  // user_id
  ti: z2.string(),
  // tweet_id
  bi: z2.string(),
  // battle_id
  lv: z2.string(),
  // level
  l: z2.enum(["en", "ja"]),
  // language
  t: z2.number(),
  // time
  et: z2.number(),
  // elapsed_time
  c: z2.string().optional()
  // comment
});
function minifyRawRaidTweet(tweet) {
  return {
    n: tweet.name,
    sn: tweet.screen_name,
    en: tweet.enemy_name,
    ui: tweet.user_id,
    ti: tweet.tweet_id,
    bi: tweet.battle_id,
    lv: tweet.level,
    l: tweet.language,
    t: tweet.time,
    et: tweet.elapsed_time,
    c: tweet.comment
  };
}
function unpackRawRaidTweetMini(mini) {
  return {
    name: mini.n,
    screen_name: mini.sn,
    enemy_name: mini.en,
    user_id: mini.ui,
    tweet_id: mini.ti,
    battle_id: mini.bi,
    level: mini.lv,
    language: mini.l,
    time: mini.t,
    comment: mini.c,
    elapsed_time: mini.et
  };
}
var zRaidTweetMini = z2.object({
  n: z2.string(),
  // name
  sn: z2.string(),
  // screen_name
  ui: z2.string(),
  // user_id
  ti: z2.string(),
  // tweet_id
  bi: z2.string(),
  // battle_id
  ei: z2.number(),
  // enemy_id(-1はリスト外)
  lv: z2.string().optional(),
  // level
  en: z2.string().optional(),
  // enemy_name
  l: z2.enum(["en", "ja"]),
  // language
  t: z2.number(),
  // time
  et: z2.number(),
  // elapsed_time
  ft: z2.number(),
  // first time(初回投稿時間)
  c: z2.string().optional()
  // comment
});

// src/redis/index.ts
import mitt from "mitt";
var redisOps = {
  host: redisEnv.REDIS_HOST,
  password: redisEnv.REDIS_PASS,
  port: Number.parseInt(redisEnv.REDIS_PORT)
};
function getRawChClient(chName = "gbs-open-raw") {
  const receiver = mitt();
  const subRedis = new Redis(redisOps);
  subRedis.subscribe(chName);
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRawRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch {
    }
  });
  return receiver;
}
function getRaidTweetChClient(chName = "gbs-open-tweet") {
  const receiver = mitt();
  const subRedis = new Redis(redisOps);
  subRedis.subscribe(chName);
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch {
    }
  });
  return receiver;
}
var pubRedis = new Redis(redisOps);
function sendRawRaidTweet(tweet, chName = "gbs-open-raw") {
  const mini = minifyRawRaidTweet(tweet);
  const json = JSON.stringify(mini);
  pubRedis.publish(chName, json);
}
function sendRaidTweet(tweet, chName = "gbs-open-tweet") {
  const json = JSON.stringify(tweet);
  pubRedis.publish(chName, json);
}
export {
  getRaidTweetChClient,
  getRawChClient,
  minifyRawRaidTweet,
  redisOps,
  sendRaidTweet,
  sendRawRaidTweet,
  unpackRawRaidTweetMini,
  zRaidTweetMini,
  zRawRaidTweetMini
};
//# sourceMappingURL=data:application/json;base64,