"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/redis/config.ts
var _zod = require('zod');
var _dotenv = require('dotenv'); var dotenv = _interopRequireWildcard(_dotenv); var dotenv6 = _interopRequireWildcard(_dotenv); var dotenv2 = _interopRequireWildcard(_dotenv); var dotenv3 = _interopRequireWildcard(_dotenv); var dotenv4 = _interopRequireWildcard(_dotenv); var dotenv5 = _interopRequireWildcard(_dotenv);
dotenv.config();
var zRedisConfig = _zod.z.object({
  REDIS_HOST: _zod.z.string(),
  REDIS_PORT: _zod.z.string(),
  REDIS_PASS: _zod.z.string()
});
var redisEnv = zRedisConfig.parse(process.env);

// src/redis/index.ts
var _ioredis = require('ioredis'); var _ioredis2 = _interopRequireDefault(_ioredis);

// src/redis/schema.ts

var zRawRaidTweetMini = _zod.z.object({
  n: _zod.z.string(),
  // name
  sn: _zod.z.string(),
  // screen_name
  en: _zod.z.string(),
  // enemy_name
  ui: _zod.z.string(),
  // user_id
  ti: _zod.z.string(),
  // tweet_id
  bi: _zod.z.string(),
  // battle_id
  lv: _zod.z.string(),
  // level
  l: _zod.z.enum(["en", "ja"]),
  // language
  t: _zod.z.number(),
  // time
  et: _zod.z.number(),
  // elapsed_time
  c: _zod.z.string().optional()
  // comment
});
function minifyRawRaidTweet(tweet) {
  return {
    n: tweet.name,
    sn: tweet.screen_name,
    en: tweet.enemy_name,
    ui: tweet.user_id,
    ti: tweet.tweet_id,
    bi: tweet.battle_id,
    lv: tweet.level,
    l: tweet.language,
    t: tweet.time,
    et: tweet.elapsed_time,
    c: tweet.comment
  };
}
function unpackRawRaidTweetMini(mini) {
  return {
    name: mini.n,
    screen_name: mini.sn,
    enemy_name: mini.en,
    user_id: mini.ui,
    tweet_id: mini.ti,
    battle_id: mini.bi,
    level: mini.lv,
    language: mini.l,
    time: mini.t,
    comment: mini.c,
    elapsed_time: mini.et
  };
}
var zRaidTweetMini = _zod.z.object({
  n: _zod.z.string(),
  // name
  sn: _zod.z.string(),
  // screen_name
  ui: _zod.z.string(),
  // user_id
  ti: _zod.z.string(),
  // tweet_id
  bi: _zod.z.string(),
  // battle_id
  ei: _zod.z.number(),
  // enemy_id(-1はリスト外)
  lv: _zod.z.string().optional(),
  // level
  en: _zod.z.string().optional(),
  // enemy_name
  l: _zod.z.enum(["en", "ja"]),
  // language
  t: _zod.z.number(),
  // time
  et: _zod.z.number(),
  // elapsed_time
  ft: _zod.z.number(),
  // first time(初回投稿時間)
  c: _zod.z.string().optional()
  // comment
});

// src/redis/index.ts
var _mitt = require('mitt'); var _mitt2 = _interopRequireDefault(_mitt);
var redisOps = {
  host: redisEnv.REDIS_HOST,
  password: redisEnv.REDIS_PASS,
  port: Number.parseInt(redisEnv.REDIS_PORT)
};
function getRawChClient(chName = "gbs-open-raw") {
  const receiver = _mitt2.default.call(void 0, );
  const subRedis = new (0, _ioredis2.default)(redisOps);
  subRedis.subscribe(chName);
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRawRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch (e) {
    }
  });
  return receiver;
}
function getRaidTweetChClient(chName = "gbs-open-tweet") {
  const receiver = _mitt2.default.call(void 0, );
  const subRedis = new (0, _ioredis2.default)(redisOps);
  subRedis.subscribe(chName);
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch (e2) {
    }
  });
  return receiver;
}
var pubRedis = new (0, _ioredis2.default)(redisOps);
function sendRawRaidTweet(tweet, chName = "gbs-open-raw") {
  const mini = minifyRawRaidTweet(tweet);
  const json = JSON.stringify(mini);
  pubRedis.publish(chName, json);
}
function sendRaidTweet(tweet, chName = "gbs-open-tweet") {
  const json = JSON.stringify(tweet);
  pubRedis.publish(chName, json);
}

// src/config.ts


// src/cache/config.ts


dotenv2.config();
var zCacheConfig = _zod.z.object({
  CACHE_PORT: _zod.z.string(),
  GBS_LIST: _zod.z.string().url()
});
var cacheEnv = zCacheConfig.parse(process.env);

// src/site/config.ts


dotenv3.config();
var zSiteConfig = _zod.z.object({
  PORT: _zod.z.string()
});
var siteEnv = zSiteConfig.parse(process.env);

// src/tweet/config.ts


dotenv4.config();
var zTweetConfig = _zod.z.object({
  BEARER: _zod.z.string(),
  OAUTH_CALLBACK: _zod.z.string().url(),
  CONSUMER_KEY: _zod.z.string(),
  CONSUMER_SECRET: _zod.z.string()
});
var tweetEnv = zTweetConfig.parse(process.env);

// src/stream/config.ts


dotenv5.config();
var zStreamConfig = _zod.z.object({
  STREAM_PORT: _zod.z.string()
});
var streamEnv = zStreamConfig.parse(process.env);

// src/config.ts
dotenv6.config();
var zAllConfig = zCacheConfig.merge(zSiteConfig).merge(zRedisConfig).merge(zTweetConfig).merge(zStreamConfig);
var allEnv = zAllConfig.parse(process.env);












exports.allEnv = allEnv; exports.getRaidTweetChClient = getRaidTweetChClient; exports.getRawChClient = getRawChClient; exports.minifyRawRaidTweet = minifyRawRaidTweet; exports.redisOps = redisOps; exports.sendRaidTweet = sendRaidTweet; exports.sendRawRaidTweet = sendRawRaidTweet; exports.unpackRawRaidTweetMini = unpackRawRaidTweetMini; exports.zAllConfig = zAllConfig; exports.zRaidTweetMini = zRaidTweetMini; exports.zRawRaidTweetMini = zRawRaidTweetMini;
//# sourceMappingURL=data:application/json;base64,